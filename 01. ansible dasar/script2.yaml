---
- hosts: server_belajar
  become: true
  tasks:
    - name: Add Script
      routeros_command:
        commands:
          - /system script add name=ftp-backup source={
#ftp server
 :local ftphost "10.240.0.228"
 :local ftpuser "tes"
 :local ftppassword "tes"
 :local ftppath "/home/backup/pop"

#GetDate
:local GDate [/system clock get date]
:local GDay [ :pick $GDate 4 6 ]
:local GMonth [ :pick $GDate 0 3 ]
:local GYear [ :pick $GDate 7 11 ]
:local GResult "$GDay $GMonth $GYear"

# file name for system backup
:local BackupConf ([/system identity get name].".backup")
:log info $BackupConf

queue simple export file=que
# file name for config export
:local ExportConf ([/system identity get name].".rsc")
:log info $ExportConf

# backup the data
/system backup save name=$BackupConf
:log info message="System backup finished (1/2).";
/export compact file=$ExportConf
:log info message="Config export finished (2/2)."

# upload the system backup
:log info message="Uploading system backup (1/2)."
/tool fetch address="$ftphost" src-path=$BackupConf user="$ftpuser" mode=ftp password="$ftppassword" dst-path="$ftppath/$GResult-$BackupConf" upload=yes

# upload the config export
:log info message="Uploading config export (2/2)."
/tool fetch address="$ftphost" src-path=$ExportConf user="$ftpuser" mode=ftp password="$ftppassword" dst-path="$ftppath/$GResult-$ExportConf" upload=yes

# delay time to finish the upload - increase it if your backup file is big
:delay 10s;

:log info message="Configuration backup finished.";


:local ts [/system clock get time]
:set ts ([:pick $ts 0 2].[:pick $ts 3 5].[:pick $ts 6 8])

:local ds [/system clock get date]
:set ds ([:pick $ds 7 11].[:pick $ds 0 3].[:pick $ds 4 6])

:local fname ("BACKUP-".[/system identity get name]."-".$ds."-".$ts)
:local sfname ("/".$fname)

:if ($saveUserDB) do={
  /tool user-manager database save name=($sfname.".umb")
  :log info message="User Manager DB Backup Finished"
}

:if ($saveSysBackup) do={
  :if ($encryptSysBackup = true) do={ /system backup save name=($sfname.".backup") }
  :if ($encryptSysBackup = false) do={ /system backup save dont-encrypt=yes name=($sfname.".backup") }
  :log info message="System Backup Finished"
}

if ($saveRawExport) do={
  /export file=($sfname.".rsc")
  :log info message="Raw configuration script export Finished"
}

:local backupFileName ""

:foreach backupFile in=[/file find] do={
  :set backupFileName ("/".[/file get $backupFile name])
  :if ([:typeof [:find $backupFileName $sfname]] != "nil") do={
    /tool fetch address=$FTPServer port=$FTPPort src-path=$backupFileName user=$FTPUser mode=ftp password=$FTPPass dst-path=$backupFileName upload=yes
  }
}

:delay 5s

:foreach backupFile in=[/file find] do={
  :if ([:typeof [:find [/file get $backupFile name] "BACKUP-"]]!="nil") do={
    /file remove $backupFile
  }
}

:log info message="Successfully removed Temporary Backup Files"
:log info message="Automatic Backup Completed Successfully"
}
